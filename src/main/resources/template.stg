pojoTemplate(className,variables,gettersAndSetters) ::=<<
package PojoFromTableGen.pojos.dos;

import java.sql.Date;
import java.sql.Timestamp;

public class <className> {

	<variables>
	
	<gettersAndSetters>
	
}
>>

getterSetter(dataType,capVariableName,smallVariableName) ::=<<
public <dataType> get<capVariableName>() {
	return <smallVariableName>;
}

public void set<capVariableName>(<dataType> <smallVariableName>) {
	this.<smallVariableName> = <smallVariableName>;
}
	
>>

daoInterface(interfaceName,varName) ::=<<
package PojoFromTableGen.pojos.daos;

import java.sql.Connection;

import PojoFromTableGen.pojos.dos.<interfaceName>Do;

public interface <interfaceName>Dao {

	public void insert(<interfaceName>Do <varName>Do, Connection conn);

	public <interfaceName>Do retrieveById(long id, Connection conn);
	
}
>>

daoImpl(interfaceName,varName) ::=<<
package PojoFromTableGen.pojos.daos;

import java.sql.Connection;

import PojoFromTableGen.pojos.dos.<interfaceName>Do;

public interface <interfaceName>Dao {

	public void insert(<interfaceName>Do <varName>Do, Connection conn);

	public <interfaceName>Do retrieveById(long id, Connection conn);
	
}
>>

setterStatement(dataType,index,varName,getter) ::=<<
stmt.set<dataType>(<index>, <varName>.get<getter>());
>>

insertQuery(className,varName,tableName,columns,values,setterStatements,refferingTableInsert) ::=<<
public void insert(<className> <varName>, Connection conn) throws SQLException {

		PreparedStatement stmt = conn
				.prepareStatement("INSERT INTO <tableName>(<columns>) VALUES(<values>)");
		<setterStatements>
		stmt.executeUpdate();
		<refferingTableInsert>
	}
>>
sequenceCreateScript(className,varName,tableName,columns,values,setterStatements,refferingTableInsert) ::=<<
CREATE SEQUENCE T_SUB_EVENT_SEQ
    INCREMENT BY 1
    START WITH 1
    CACHE 2;
>>

hibernateEntity(tableName,className,variables,manyToOne,oneToMany,primaryKey,gettersAndSetters) ::=<<
package Utils.test;

import java.sql.Timestamp;
import java.util.List;
import java.util.ArrayList;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

@Entity
@SequenceGenerator(name = "SequenceName", sequenceName = "SequenceName", initialValue = 1, allocationSize = 1)
@Table(name = "<tableName>")
public class <className> {

	public <className>() {

	}

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SequenceName")
	<primaryKey>
	<variables>
	<manyToOne>
	<oneToMany>

	<gettersAndSetters>

}
>>
oneToManyMapping(mappedBy,childTableClass,childTableObject,thisClassName) ::=<<

	@OneToMany(mappedBy = "<mappedBy>", cascade = CascadeType.ALL)
	private List\<<childTableClass>\> <childTableObject>s;
	
	public void add(<childTableClass> <childTableObject>){
		
		if(<childTableObject>s ==null) {
			<childTableObject>s = new ArrayList\<>();
		}
		
		<childTableObject>s.add(<childTableObject>);
		<childTableObject>.set<thisClassName>(this);
	}
	
>>

manyTOneMapping(columnName,parentClassName,parentObjName)::=<<

	@ManyToOne(cascade = CascadeType.ALL)
	@JoinColumn(name = "<columnName>")
	private <parentClassName> <parentObjName>;

>>
daoTemplate(selectQuery,className,gettersFromResultSet) ::=<<
package PojoFromTableGen.pojos.daos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import PojoFromTableGen.pojos.dos.<className>Do;

public class <className>DaoImpl {

	//TODO add where conditions accordingly
	private static final String selectQuery = "<selectQuery> WHERE ";

	public List\<<className>Do> findBy(long subscriptionId, Connection conn) {
		try (PreparedStatement stmt = conn.prepareStatement(selectQuery)) {
			stmt.setLong(1, subscriptionId);

			List\<<className>Do> dos = new ArrayList\<<className>Do>();

			ResultSet res = stmt.executeQuery();
			while (res.next()) {
				<className>Do eventsDo = new <className>Do();
				<gettersFromResultSet>
				dos.add(eventsDo);
			}

			return dos;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

	}

}
>>


hibernateRepository(packageName,entityName) ::=<<
package <packageName>.db.repository;

import java.util.Date;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import <packageName>.entities.<entityName>;

@Repository
public interface <entityName>Repository extends JpaRepository\<<entityName>, Long>,
		JpaSpecificationExecutor\<<entityName>>, PagingAndSortingRepository\<<entityName>, Long> {

	@Query("FROM <entityName> WHERE activatedUserId=:ownerId")
	public List\<<entityName>> get<entityName>ByOwnerId(@Param("ownerId"));

}
>>
